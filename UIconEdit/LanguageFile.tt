<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Security" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ output extension=".cs" #>
#region BSD License
/*
Copyright © 2015, KimikoMuffin.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer. 
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.
3. The names of its contributors may not be used to endorse or promote 
   products derived from this software without specific prior written 
   permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
#endregion

/*
   ==========================================================================
   <#= WriteAutoGenMessage("\r\n   ") #>
   ==========================================================================
*/
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Xml.Linq;

using UIconEdit.Maker.Properties;

namespace UIconEdit.Maker
{
    internal class LanguageFile : IEquatable<LanguageFile>
    {
        private static LanguageFile _default = new LanguageFile();
        /// <summary>
        /// Gets a default language file.
        /// </summary>
        public static LanguageFile Default { get { return _default; } }

        private Dictionary<string, string> _text;

        private static Dictionary<string, Dictionary<string, string>> _cache = new Dictionary<string, Dictionary<string, string>>(StringComparer.OrdinalIgnoreCase);

        #region Constructors
        private LanguageFile()
        {
            _shortName = string.Empty;
            using (StringReader sr = new StringReader(Resources.en_US))
                Load(sr, true);
            _textRO = new ReadOnlyDictionary<string, string>(_text);
        }

        /// <summary>
        /// Creates a new instance with the specified language name.
        /// </summary>
        /// <param name="langName">The short language name to load.</param>
        /// <param name="useCache"><see langword="true"/> to use the cache; <see langword="false"/> to load from the file no matter what.</param>
        public LanguageFile(string langName, bool useCache)
        {
            langName = langName.Trim();
            int dex = langName.IndexOf('-');
            if (!useCache || !_cache.TryGetValue(langName, out _text))
            {
                if (dex > 0)
                {
                    string shortPath = GetPath(langName.Substring(0, dex));
                    if (File.Exists(shortPath))
                        Load(shortPath);
                }
                Load(GetPath(langName));
                _shortName = langName;
                _cache[langName] = _text;
            }
            _textRO = new ReadOnlyDictionary<string, string>(_text);
        }
        #endregion

        #region Load
        private static string GetPath(string langName)
        {
            return Path.Combine(Path.GetDirectoryName(typeof(LanguageFile).Assembly.Location), "Languages", langName + ".xml");
        }

        private void Load(string path)
        {
            using (StreamReader sr = new StreamReader(path, true))
                Load(sr, false);
        }

        private void Load(TextReader textReader, bool initial)
        {
            Dictionary<string, string> loadedText;
            XDocument xDoc = XDocument.Load(textReader);
            var root = xDoc.Root;

            if (root == null || root.Name.LocalName != "Language")
                throw new InvalidDataException();

            var langAttr = root.Attribute("LangName");
            if (langAttr == null)
                throw new InvalidDataException();

            _langName = langAttr.Value;

            loadedText = root.Elements().ToDictionary(i => i.Name.LocalName, delegate (XElement element)
            {
                if (element.HasElements)
                    throw new FileFormatException();
                return element.Value;
            }, StringComparer.OrdinalIgnoreCase);

            if (initial)
            {
                _text = new Dictionary<string, string>(loadedText, StringComparer.OrdinalIgnoreCase);
            }
            else
            {
                if (_text == null) _text = new Dictionary<string, string>(_default._text, StringComparer.OrdinalIgnoreCase);
                foreach (var curKVP in loadedText)
                {
                    if (_text.ContainsKey(curKVP.Key))
                        _text[curKVP.Key] = curKVP.Value;
                }
            }
        }
        #endregion

        #region Equality
        public bool Equals(LanguageFile other)
        {
            if (ReferenceEquals(other, null) || !_shortName.Equals(other._shortName, StringComparison.OrdinalIgnoreCase)
                || !_langName.Equals(other._langName, StringComparison.OrdinalIgnoreCase))
            {
                return false;
            }
            if (_text == other._text) return true;

            foreach (var curKVP in _text)
            {
                string curVal;
                if (!other._text.TryGetValue(curKVP.Key, out curVal) && curKVP.Value != curVal)
                    return false;
            }
            return true;
        }

        public override bool Equals(object obj)
        {
            return Equals(obj as LanguageFile);
        }

        public override int GetHashCode()
        {
            if (_shortName == null) return 0;
            return _shortName.ToUpper().GetHashCode();
        }

        public static bool operator ==(LanguageFile l1, LanguageFile l2)
        {
            if (ReferenceEquals(l1, l2)) return true;
            if (ReferenceEquals(l1, null) ^ ReferenceEquals(l2, null)) return false;

            return l1.Equals(l2);
        }

        public static bool operator !=(LanguageFile l1, LanguageFile l2)
        {
            return !(l1 == l2);
        }
        #endregion

        private ReadOnlyDictionary<string, string> _textRO;
        /// <summary>
        /// Gets a dictionary containing localized text.
        /// </summary>
        public ReadOnlyDictionary<string, string> Text { get { return _textRO; } }

        #region Localized Properties
        private string _shortName;
        /// <summary>
        /// Gets the short name of the language file.
        /// </summary>
        public string ShortName { get { return _shortName; } }

        public const string DefaultShortName = "en-US";

        private string _langName;
        /// <summary>
        /// Gets the long name of the language file.
        /// </summary>
        public string LangName { get { return _langName; } }

<#
    XDocument xDoc;

    using(XmlReader reader = XmlReader.Create(Host.ResolvePath("Languages/en-US.xml")))
        xDoc = XDocument.Load(reader);

    string lastComment = null;
    foreach (XNode xNode in xDoc.Root.Nodes())
    {
        XText xText = xNode as XText;
        if (xText != null && xText.Value.IndexOf("\n", 1) >= 0)
        {
            lastComment = null;
            continue;
        }

        XComment xComment = xNode as XComment;
        if (xComment != null)
        {
            lastComment = xComment.Value;
            continue;
        }

        XElement xElement = xNode as XElement;
        if (xElement == null)
            continue;

        string name = xElement.Name.LocalName;

        bool found = false;
        foreach (string curName in _limitNames)
        {
            if (name.StartsWith(curName) && name != curName)
            {
                found = true;
                break;
            }
        }
        if (found) continue;

        #>

        /// <summary>
        /// Gets a localized string similar to: <#

        string val = xElement.Value;

        if (val.Length > 512)
            val = val.Substring(0, 509) + "...";

        Write(SecurityElement.Escape(val));
 #>

        /// </summary><#

        if (lastComment != null)
        {
            #>

        /// <remarks><#= SecurityElement.Escape(lastComment.Trim()).Replace("&quot;", "\"").Replace("&apos;", "'") #></remarks><#
        }
#>

        public string <#
        Write(name);
        Write(" { get { return _text[\"");
        Write(name);
        Write("\"]; } }");
    }
    Write("\r\n");
#>
        #endregion

        public string GetErrorMessage(IconLoadException e)
        {
            IconErrorCode eCode;

            switch (e.Code)
            {
                case IconErrorCode.InvalidFormat:
                case IconErrorCode.EntryParseError:
                case IconErrorCode.ZeroEntries:
                case IconErrorCode.WrongType:
                case IconErrorCode.InvalidBitDepth:
                    eCode = e.Code;
                    break;
                case IconErrorCode.ZeroValidEntries:
                    eCode = IconErrorCode.ZeroEntries;
                    break;
                default:
                    eCode = IconErrorCode.Unknown;
                    break;
            }

            const string errorPrefix = "IconError";

            string s = errorPrefix + ((int)eCode).ToString("X", NumberFormatInfo.InvariantInfo);

            string message;
            if (e.TypeCode == IconTypeCode.Cursor && _text.TryGetValue(s + "cursor", out message))
                return message;
            if (e.TypeCode == IconTypeCode.Icon && _text.TryGetValue(s + "icon", out message))
                return message;

            return _text[s];
        }

        public string GetScalingFilter(IconScalingFilter e)
        {
            string s = e.ToString();
            string result;

            if (_text.TryGetValue("ScalingFilter" + s, out result))
                return result;

            return s;
        }
    }
}
<#@ include file="ToolText.t4" once="true"#>
<#+
    static readonly string[] _limitNames = { "IconError", "ScalingFilter" };
 #>