#region BSD License
/*
Copyright © 2015, KimikoMuffin.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer. 
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.
3. The names of its contributors may not be used to endorse or promote 
   products derived from this software without specific prior written 
   permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
#endregion

/*
   ==========================================================================
   NOTE: This file was auto-generated by a tool. Changes to this file will be
   overwritten when the file is regenerated.
   ==========================================================================
*/
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Xml.Linq;

using UIconEdit.Maker.Properties;

namespace UIconEdit.Maker
{
    internal class LanguageFile : IEquatable<LanguageFile>
    {
        private static LanguageFile _default = new LanguageFile();
        /// <summary>
        /// Gets a default language file.
        /// </summary>
        public static LanguageFile Default { get { return _default; } }

        private Dictionary<string, string> _text;

        private static Dictionary<string, Dictionary<string, string>> _cache = new Dictionary<string, Dictionary<string, string>>(StringComparer.OrdinalIgnoreCase);

        #region Constructors
        private LanguageFile()
        {
            _shortName = string.Empty;
            using (StringReader sr = new StringReader(Resources.en_US))
                Load(sr, true);
            _textRO = new ReadOnlyDictionary<string, string>(_text);
        }

        /// <summary>
        /// Creates a new instance with the specified language name.
        /// </summary>
        /// <param name="langName">The short language name to load.</param>
        /// <param name="useCache"><see langword="true"/> to use the cache; <see langword="false"/> to load from the file no matter what.</param>
        public LanguageFile(string langName, bool useCache)
        {
            langName = langName.Trim();
            int dex = langName.IndexOf('-');
            if (!useCache || !_cache.TryGetValue(langName, out _text))
            {
                if (dex > 0)
                {
                    string shortPath = GetPath(langName.Substring(0, dex));
                    if (File.Exists(shortPath))
                        Load(shortPath);
                }
                Load(GetPath(langName));
                _shortName = langName;
                _cache[langName] = _text;
            }
            _textRO = new ReadOnlyDictionary<string, string>(_text);
        }
        #endregion

        #region Load
        private static string GetPath(string langName)
        {
            return Path.Combine(Path.GetDirectoryName(typeof(LanguageFile).Assembly.Location), "Languages", langName + ".xml");
        }

        private void Load(string path)
        {
            using (StreamReader sr = new StreamReader(path, true))
                Load(sr, false);
        }

        private void Load(TextReader textReader, bool initial)
        {
            Dictionary<string, string> loadedText;
            XDocument xDoc = XDocument.Load(textReader);
            var root = xDoc.Root;

            if (root == null || root.Name.LocalName != "Language")
                throw new InvalidDataException();

            var langAttr = root.Attribute("LangName");
            if (langAttr == null)
                throw new InvalidDataException();

            _langName = langAttr.Value;

            loadedText = root.Elements().ToDictionary(i => i.Name.LocalName, delegate (XElement element)
            {
                if (element.HasElements)
                    throw new FileFormatException();
                return element.Value;
            }, StringComparer.OrdinalIgnoreCase);

            if (initial)
            {
                _text = new Dictionary<string, string>(loadedText, StringComparer.OrdinalIgnoreCase);
            }
            else
            {
                if (_text == null) _text = new Dictionary<string, string>(_default._text, StringComparer.OrdinalIgnoreCase);
                foreach (var curKVP in loadedText)
                {
                    if (_text.ContainsKey(curKVP.Key))
                        _text[curKVP.Key] = curKVP.Value;
                }
            }
        }
        #endregion

        #region Equality
        public bool Equals(LanguageFile other)
        {
            if (ReferenceEquals(other, null) || !_shortName.Equals(other._shortName, StringComparison.OrdinalIgnoreCase)
                || !_langName.Equals(other._langName, StringComparison.OrdinalIgnoreCase))
            {
                return false;
            }
            if (_text == other._text) return true;

            foreach (var curKVP in _text)
            {
                string curVal;
                if (!other._text.TryGetValue(curKVP.Key, out curVal) && curKVP.Value != curVal)
                    return false;
            }
            return true;
        }

        public override bool Equals(object obj)
        {
            return Equals(obj as LanguageFile);
        }

        public override int GetHashCode()
        {
            if (_shortName == null) return 0;
            return _shortName.ToUpper().GetHashCode();
        }

        public static bool operator ==(LanguageFile l1, LanguageFile l2)
        {
            if (ReferenceEquals(l1, l2)) return true;
            if (ReferenceEquals(l1, null) ^ ReferenceEquals(l2, null)) return false;

            return l1.Equals(l2);
        }

        public static bool operator !=(LanguageFile l1, LanguageFile l2)
        {
            return !(l1 == l2);
        }
        #endregion

        private ReadOnlyDictionary<string, string> _textRO;
        /// <summary>
        /// Gets a dictionary containing localized text.
        /// </summary>
        public ReadOnlyDictionary<string, string> Text { get { return _textRO; } }

        #region Localized Properties
        private string _shortName;
        /// <summary>
        /// Gets the short name of the language file.
        /// </summary>
        public string ShortName { get { return _shortName; } }

        public const string DefaultShortName = "en-US";

        private string _langName;
        /// <summary>
        /// Gets the long name of the language file.
        /// </summary>
        public string LangName { get { return _langName; } }


        /// <summary>
        /// Gets a localized string similar to: UIconEdit
        /// </summary>
        public string Title { get { return _text["Title"]; } }
        /// <summary>
        /// Gets a localized string similar to: Error
        /// </summary>
        /// <remarks>Error</remarks>
        public string Error { get { return _text["Error"]; } }
        /// <summary>
        /// Gets a localized string similar to: Could not load the language &quot;{0}&quot;.
        /// </summary>
        /// <remarks>{0} = short language name (i.e. "en-US").</remarks>
        public string LanguageLoadError { get { return _text["LanguageLoadError"]; } }
        /// <summary>
        /// Gets a localized string similar to: Could not save the settings file.
        /// </summary>
        /// <remarks>{0} = short language name (i.e. "en-US").</remarks>
        public string SettingsSaveError { get { return _text["SettingsSaveError"]; } }
        /// <summary>
        /// Gets a localized string similar to: Could not load &quot;{0}&quot;.
        /// </summary>
        /// <remarks>{0} = file path.</remarks>
        public string ImageLoadError { get { return _text["ImageLoadError"]; } }
        /// <summary>
        /// Gets a localized string similar to: Could not save &quot;{0}&quot;.
        /// </summary>
        /// <remarks>{0} = file path.</remarks>
        public string ImageSaveError { get { return _text["ImageSaveError"]; } }
        /// <summary>
        /// Gets a localized string similar to: A {0}-bit {1}×{2} image already exists in the icon file.
        /// </summary>
        /// <remarks>{0} = number of bits per pixel, {1} = width, {2} = height.</remarks>
        public string ImageAddError { get { return _text["ImageAddError"]; } }
        /// <summary>
        /// Gets a localized string similar to: Could not load icon #{0} in &quot;{1}&quot;.
        /// </summary>
        /// <remarks>{0} = index of icon in EXE or DLL file, {1} = file path to EXE or DLL file.</remarks>
        public string IconExtractError { get { return _text["IconExtractError"]; } }
        /// <summary>
        /// Gets a localized string similar to: Could not load cursor #{0} in &quot;{1}&quot;.
        /// </summary>
        /// <remarks>{0} = index of cursor in EXE or DLL file, {1} = file path to EXE or DLL file.</remarks>
        public string CursorExtractError { get { return _text["CursorExtractError"]; } }
        /// <summary>
        /// Gets a localized string similar to: No valid icons or cursors were loaded from &quot;{0}&quot;.
        /// </summary>
        /// <remarks>{0} = file path to EXE or DLL file.</remarks>
        public string IconExtractNone { get { return _text["IconExtractNone"]; } }
        /// <summary>
        /// Gets a localized string similar to: Could not save registry values.
        /// </summary>
        /// <remarks>{0} = file path to EXE or DLL file.</remarks>
        public string RegistryError { get { return _text["RegistryError"]; } }
        /// <summary>
        /// Gets a localized string similar to: Only 32-bit images are permitted when the width or height is greater than or equal to 256.
        /// </summary>
        /// <remarks>{0} = file path to EXE or DLL file.</remarks>
        public string TooBigNonPng { get { return _text["TooBigNonPng"]; } }
        /// <summary>
        /// Gets a localized string similar to: {0}bpp{1}x{2}
        /// </summary>
        /// <remarks>{0} = number of bits per pixel, {1} = width, {2} = height.</remarks>
        public string FilenameSuffix { get { return _text["FilenameSuffix"]; } }
        /// <summary>
        /// Gets a localized string similar to: -{0}
        /// </summary>
        /// <remarks>{0} = index (appended to FilenameSuffix in case of duplicate names).</remarks>
        public string FilenameSuffixEx { get { return _text["FilenameSuffixEx"]; } }
        /// <summary>
        /// Gets a localized string similar to: About
        /// </summary>
        public string About { get { return _text["About"]; } }
        /// <summary>
        /// Gets a localized string similar to: UIconEdit version {0}
        /// </summary>
        /// <remarks>{0} = version number</remarks>
        public string AboutVersion { get { return _text["AboutVersion"]; } }
        /// <summary>
        /// Gets a localized string similar to: © 2015-2016 by KimikoMuffin. All rights reserved.
        /// </summary>
        /// <remarks>{0} = version number</remarks>
        public string AboutCopyright { get { return _text["AboutCopyright"]; } }
        /// <summary>
        /// Gets a localized string similar to: _File
        /// </summary>
        public string MenuFile { get { return _text["MenuFile"]; } }
        /// <summary>
        /// Gets a localized string similar to: _Open
        /// </summary>
        public string MenuFileOpen { get { return _text["MenuFileOpen"]; } }
        /// <summary>
        /// Gets a localized string similar to: _New
        /// </summary>
        public string MenuFileNew { get { return _text["MenuFileNew"]; } }
        /// <summary>
        /// Gets a localized string similar to: _Save
        /// </summary>
        public string MenuFileSave { get { return _text["MenuFileSave"]; } }
        /// <summary>
        /// Gets a localized string similar to: Save _As
        /// </summary>
        public string MenuFileSaveAs { get { return _text["MenuFileSaveAs"]; } }
        /// <summary>
        /// Gets a localized string similar to: _Reload
        /// </summary>
        public string MenuFileReload { get { return _text["MenuFileReload"]; } }
        /// <summary>
        /// Gets a localized string similar to: E_xit
        /// </summary>
        public string MenuFileQuit { get { return _text["MenuFileQuit"]; } }
        /// <summary>
        /// Gets a localized string similar to: _Edit
        /// </summary>
        public string MenuEdit { get { return _text["MenuEdit"]; } }
        /// <summary>
        /// Gets a localized string similar to: Add _new image
        /// </summary>
        public string MenuEditAdd { get { return _text["MenuEditAdd"]; } }
        /// <summary>
        /// Gets a localized string similar to: _Duplicate current image
        /// </summary>
        public string MenuEditDup { get { return _text["MenuEditDup"]; } }
        /// <summary>
        /// Gets a localized string similar to: _Remove current image
        /// </summary>
        public string MenuEditRem { get { return _text["MenuEditRem"]; } }
        /// <summary>
        /// Gets a localized string similar to: E_xport current image
        /// </summary>
        public string MenuEditExp { get { return _text["MenuEditExp"]; } }
        /// <summary>
        /// Gets a localized string similar to: Export _all
        /// </summary>
        public string MenuEditExpAll { get { return _text["MenuEditExpAll"]; } }
        /// <summary>
        /// Gets a localized string similar to: _Settings
        /// </summary>
        public string MenuEditSettings { get { return _text["MenuEditSettings"]; } }
        /// <summary>
        /// Gets a localized string similar to: _Help
        /// </summary>
        public string MenuHelp { get { return _text["MenuHelp"]; } }
        /// <summary>
        /// Gets a localized string similar to: _About
        /// </summary>
        public string MenuHelpAbout { get { return _text["MenuHelpAbout"]; } }
        /// <summary>
        /// Gets a localized string similar to: Open
        /// </summary>
        public string ButtonTipOpen { get { return _text["ButtonTipOpen"]; } }
        /// <summary>
        /// Gets a localized string similar to: New
        /// </summary>
        public string ButtonTipNew { get { return _text["ButtonTipNew"]; } }
        /// <summary>
        /// Gets a localized string similar to: Save
        /// </summary>
        public string ButtonTipSave { get { return _text["ButtonTipSave"]; } }
        /// <summary>
        /// Gets a localized string similar to: First image
        /// </summary>
        public string ButtonTipFirst { get { return _text["ButtonTipFirst"]; } }
        /// <summary>
        /// Gets a localized string similar to: Previous image
        /// </summary>
        public string ButtonTipPrev { get { return _text["ButtonTipPrev"]; } }
        /// <summary>
        /// Gets a localized string similar to: Next image
        /// </summary>
        public string ButtonTipNext { get { return _text["ButtonTipNext"]; } }
        /// <summary>
        /// Gets a localized string similar to: Last image
        /// </summary>
        public string ButtonTipLast { get { return _text["ButtonTipLast"]; } }
        /// <summary>
        /// Gets a localized string similar to: Add new image
        /// </summary>
        public string ButtonTipAdd { get { return _text["ButtonTipAdd"]; } }
        /// <summary>
        /// Gets a localized string similar to: Duplicate current image
        /// </summary>
        public string ButtonTipDup { get { return _text["ButtonTipDup"]; } }
        /// <summary>
        /// Gets a localized string similar to: Remove current image
        /// </summary>
        public string ButtonTipRem { get { return _text["ButtonTipRem"]; } }
        /// <summary>
        /// Gets a localized string similar to: Export current image
        /// </summary>
        public string ButtonTipExp { get { return _text["ButtonTipExp"]; } }
        /// <summary>
        /// Gets a localized string similar to: Save
        /// </summary>
        public string ModifiedCaption { get { return _text["ModifiedCaption"]; } }
        /// <summary>
        /// Gets a localized string similar to: File was modified. Save?
        /// </summary>
        public string ModifiedMessage { get { return _text["ModifiedMessage"]; } }
        /// <summary>
        /// Gets a localized string similar to: Reload
        /// </summary>
        public string ReloadCaption { get { return _text["ReloadCaption"]; } }
        /// <summary>
        /// Gets a localized string similar to: All unsaved changes will be lost! Continue?
        /// </summary>
        public string ReloadMessage { get { return _text["ReloadMessage"]; } }
        /// <summary>
        /// Gets a localized string similar to: Delete Image
        /// </summary>
        public string RemoveCaption { get { return _text["RemoveCaption"]; } }
        /// <summary>
        /// Gets a localized string similar to: Delete current image? This cannot be undone!
        /// </summary>
        public string RemoveMessage { get { return _text["RemoveMessage"]; } }
        /// <summary>
        /// Gets a localized string similar to: Overwrite File
        /// </summary>
        public string OverwriteCaption { get { return _text["OverwriteCaption"]; } }
        /// <summary>
        /// Gets a localized string similar to: The file &quot;{0}&quot; already exists. Overwrite it?
        /// </summary>
        /// <remarks>{0} = file path</remarks>
        public string OverwriteMessage { get { return _text["OverwriteMessage"]; } }
        /// <summary>
        /// Gets a localized string similar to: Preview
        /// </summary>
        public string Preview { get { return _text["Preview"]; } }
        /// <summary>
        /// Gets a localized string similar to: Image + Alpha
        /// </summary>
        public string PreviewCombined { get { return _text["PreviewCombined"]; } }
        /// <summary>
        /// Gets a localized string similar to: Base Image
        /// </summary>
        public string PreviewBase { get { return _text["PreviewBase"]; } }
        /// <summary>
        /// Gets a localized string similar to: Alpha Mask
        /// </summary>
        public string PreviewAlpha { get { return _text["PreviewAlpha"]; } }
        /// <summary>
        /// Gets a localized string similar to: Alpha Mode:
        /// </summary>
        public string PreviewAlphaMode { get { return _text["PreviewAlphaMode"]; } }
        /// <summary>
        /// Gets a localized string similar to: RGB and Alpha
        /// </summary>
        public string AmodeBoth { get { return _text["AmodeBoth"]; } }
        /// <summary>
        /// Gets a localized string similar to: RGB only
        /// </summary>
        public string AmodeRGB { get { return _text["AmodeRGB"]; } }
        /// <summary>
        /// Gets a localized string similar to: Alpha only
        /// </summary>
        public string AmodeAlpha { get { return _text["AmodeAlpha"]; } }
        /// <summary>
        /// Gets a localized string similar to: Settings
        /// </summary>
        public string Settings { get { return _text["Settings"]; } }
        /// <summary>
        /// Gets a localized string similar to: Language
        /// </summary>
        public string SettingsLanguage { get { return _text["SettingsLanguage"]; } }
        /// <summary>
        /// Gets a localized string similar to: Keep cursor hotspot checked after switching to a different image
        /// </summary>
        public string SettingsKeepChecked { get { return _text["SettingsKeepChecked"]; } }
        /// <summary>
        /// Gets a localized string similar to: Add to Windows Explorer context menu
        /// </summary>
        public string SettingsRegister { get { return _text["SettingsRegister"]; } }
        /// <summary>
        /// Gets a localized string similar to: _OK
        /// </summary>
        public string ButtonOK { get { return _text["ButtonOK"]; } }
        /// <summary>
        /// Gets a localized string similar to: _Cancel
        /// </summary>
        public string ButtonCancel { get { return _text["ButtonCancel"]; } }
        /// <summary>
        /// Gets a localized string similar to: _Yes
        /// </summary>
        public string ButtonYes { get { return _text["ButtonYes"]; } }
        /// <summary>
        /// Gets a localized string similar to: _No
        /// </summary>
        public string ButtonNo { get { return _text["ButtonNo"]; } }
        /// <summary>
        /// Gets a localized string similar to: Do_n&apos;t Save
        /// </summary>
        public string ButtonNoSave { get { return _text["ButtonNoSave"]; } }
        /// <summary>
        /// Gets a localized string similar to: Overwrite _All
        /// </summary>
        public string ButtonOverwrite { get { return _text["ButtonOverwrite"]; } }
        /// <summary>
        /// Gets a localized string similar to: _Preview
        /// </summary>
        public string ButtonPreview { get { return _text["ButtonPreview"]; } }
        /// <summary>
        /// Gets a localized string similar to: _Apply
        /// </summary>
        public string ButtonApply { get { return _text["ButtonApply"]; } }
        /// <summary>
        /// Gets a localized string similar to: _Retry
        /// </summary>
        public string ButtonRetry { get { return _text["ButtonRetry"]; } }
        /// <summary>
        /// Gets a localized string similar to: Set Alpha Image
        /// </summary>
        public string ButtonSetAlpha { get { return _text["ButtonSetAlpha"]; } }
        /// <summary>
        /// Gets a localized string similar to: {0}-bit
        /// </summary>
        /// <remarks>{0} = number of bits per pixel</remarks>
        public string FormatBitsPerPixel { get { return _text["FormatBitsPerPixel"]; } }
        /// <summary>
        /// Gets a localized string similar to: {0}×{1}
        /// </summary>
        /// <remarks>{0} = width, {1} = height</remarks>
        public string FormatSize { get { return _text["FormatSize"]; } }
        /// <summary>
        /// Gets a localized string similar to: PNG
        /// </summary>
        /// <remarks>{0} = width, {1} = height</remarks>
        public string FormatPng { get { return _text["FormatPng"]; } }
        /// <summary>
        /// Gets a localized string similar to: Custom:
        /// </summary>
        public string CustomSize { get { return _text["CustomSize"]; } }
        /// <summary>
        /// Gets a localized string similar to: Extended Windows 10 Sizes
        /// </summary>
        public string ExtendedSize { get { return _text["ExtendedSize"]; } }
        /// <summary>
        /// Gets a localized string similar to: Width:
        /// </summary>
        public string SizeWidth { get { return _text["SizeWidth"]; } }
        /// <summary>
        /// Gets a localized string similar to: Height:
        /// </summary>
        public string SizeHeight { get { return _text["SizeHeight"]; } }
        /// <summary>
        /// Gets a localized string similar to: Alpha threshold:
        /// </summary>
        public string AlphaThreshold { get { return _text["AlphaThreshold"]; } }
        /// <summary>
        /// Gets a localized string similar to: Threshold mode:
        /// </summary>
        public string AlphaThresholdMode { get { return _text["AlphaThresholdMode"]; } }
        /// <summary>
        /// Gets a localized string similar to: RGB become darker according to alpha
        /// </summary>
        public string AlphaThresholdModeDarker { get { return _text["AlphaThresholdModeDarker"]; } }
        /// <summary>
        /// Gets a localized string similar to: RGB values become lighter according to alpha
        /// </summary>
        public string AlphaThresholdModeLighter { get { return _text["AlphaThresholdModeLighter"]; } }
        /// <summary>
        /// Gets a localized string similar to: No change, just set alpha to fully opaque
        /// </summary>
        public string AlphaThresholdModeNoChange { get { return _text["AlphaThresholdModeNoChange"]; } }
        /// <summary>
        /// Gets a localized string similar to: Full Color + Alpha (32-bit)
        /// </summary>
        public string Bits32 { get { return _text["Bits32"]; } }
        /// <summary>
        /// Gets a localized string similar to: Full Color (24-bit)
        /// </summary>
        public string Bits24 { get { return _text["Bits24"]; } }
        /// <summary>
        /// Gets a localized string similar to: 256-color (8-bit)
        /// </summary>
        public string Bits8 { get { return _text["Bits8"]; } }
        /// <summary>
        /// Gets a localized string similar to: 16-color (4-bit)
        /// </summary>
        public string Bits4 { get { return _text["Bits4"]; } }
        /// <summary>
        /// Gets a localized string similar to: 2-color (1-bit)
        /// </summary>
        public string Bits1 { get { return _text["Bits1"]; } }
        /// <summary>
        /// Gets a localized string similar to: Image
        /// </summary>
        public string GroupImage { get { return _text["GroupImage"]; } }
        /// <summary>
        /// Gets a localized string similar to: Size
        /// </summary>
        public string GroupSize { get { return _text["GroupSize"]; } }
        /// <summary>
        /// Gets a localized string similar to: Bits Per Pixel
        /// </summary>
        public string GroupBitsPerPixel { get { return _text["GroupBitsPerPixel"]; } }
        /// <summary>
        /// Gets a localized string similar to: Add Image
        /// </summary>
        public string AddTitle { get { return _text["AddTitle"]; } }
        /// <summary>
        /// Gets a localized string similar to: Duplicate Image
        /// </summary>
        public string DuplicateTitle { get { return _text["DuplicateTitle"]; } }
        /// <summary>
        /// Gets a localized string similar to: %
        /// </summary>
        public string Percent { get { return _text["Percent"]; } }
        /// <summary>
        /// Gets a localized string similar to: X:
        /// </summary>
        public string HotspotX { get { return _text["HotspotX"]; } }
        /// <summary>
        /// Gets a localized string similar to: Y:
        /// </summary>
        public string HotspotY { get { return _text["HotspotY"]; } }
        /// <summary>
        /// Gets a localized string similar to: {0},{1}
        /// </summary>
        /// <remarks>{0} = horizontal position, {1} = vertical position</remarks>
        public string Position { get { return _text["Position"]; } }
        /// <summary>
        /// Gets a localized string similar to: {0}/{1}
        /// </summary>
        /// <remarks>{0} = the 1-based index of the current value in the list of items. {1} = the number of images.</remarks>
        public string ImgPos { get { return _text["ImgPos"]; } }
        /// <summary>
        /// Gets a localized string similar to: New File
        /// </summary>
        /// <remarks>{0} = the 1-based index of the current value in the list of items. {1} = the number of images.</remarks>
        public string FilePathNew { get { return _text["FilePathNew"]; } }
        /// <summary>
        /// Gets a localized string similar to: Extract
        /// </summary>
        public string Extract { get { return _text["Extract"]; } }
        /// <summary>
        /// Gets a localized string similar to: #{0} ({1})
        /// </summary>
        /// <remarks>{0} = index of an icon or cursor in an icon file, {1} = number of images in icon/cursor.</remarks>
        public string ExtractFrameCount { get { return _text["ExtractFrameCount"]; } }
        /// <summary>
        /// Gets a localized string similar to: Icons
        /// </summary>
        /// <remarks>{0} = index of an icon or cursor in an icon file, {1} = number of images in icon/cursor.</remarks>
        public string ExtractIco { get { return _text["ExtractIco"]; } }
        /// <summary>
        /// Gets a localized string similar to: Cursors
        /// </summary>
        /// <remarks>{0} = index of an icon or cursor in an icon file, {1} = number of images in icon/cursor.</remarks>
        public string ExtractCur { get { return _text["ExtractCur"]; } }
        /// <summary>
        /// Gets a localized string similar to: Scaling filter:
        /// </summary>
        public string ScalingFilter { get { return _text["ScalingFilter"]; } }
        /// <summary>
        /// Gets a localized string similar to: Icon files
        /// </summary>
        public string TypeIco { get { return _text["TypeIco"]; } }
        /// <summary>
        /// Gets a localized string similar to: Cursor files
        /// </summary>
        public string TypeCur { get { return _text["TypeCur"]; } }
        /// <summary>
        /// Gets a localized string similar to: Icon or cursor files
        /// </summary>
        public string TypeIcoCur { get { return _text["TypeIcoCur"]; } }
        /// <summary>
        /// Gets a localized string similar to: All files
        /// </summary>
        public string TypeAll { get { return _text["TypeAll"]; } }
        /// <summary>
        /// Gets a localized string similar to: PNG files
        /// </summary>
        public string TypePng { get { return _text["TypePng"]; } }
        /// <summary>
        /// Gets a localized string similar to: PNG files with size and bit-depth suffix
        /// </summary>
        public string TypePngSuffix { get { return _text["TypePngSuffix"]; } }
        /// <summary>
        /// Gets a localized string similar to: Image files
        /// </summary>
        public string TypeImage { get { return _text["TypeImage"]; } }
        #endregion

        public string GetErrorMessage(IconLoadException e)
        {
            IconErrorCode eCode;

            switch (e.Code)
            {
                case IconErrorCode.InvalidFormat:
                case IconErrorCode.EntryParseError:
                case IconErrorCode.ZeroEntries:
                case IconErrorCode.WrongType:
                case IconErrorCode.InvalidBitDepth:
                    eCode = e.Code;
                    break;
                case IconErrorCode.ZeroValidEntries:
                    eCode = IconErrorCode.ZeroEntries;
                    break;
                default:
                    eCode = IconErrorCode.Unknown;
                    break;
            }

            const string errorPrefix = "IconError";

            string s = errorPrefix + ((int)eCode).ToString("X", NumberFormatInfo.InvariantInfo);

            string message;
            if (e.TypeCode == IconTypeCode.Cursor && _text.TryGetValue(s + "cursor", out message))
                return message;
            if (e.TypeCode == IconTypeCode.Icon && _text.TryGetValue(s + "icon", out message))
                return message;

            return _text[s];
        }

        public string GetScalingFilter(IconScalingFilter e)
        {
            string s = e.ToString();
            string result;

            if (_text.TryGetValue("ScalingFilter" + s, out result))
                return result;

            return s;
        }
    }
}
